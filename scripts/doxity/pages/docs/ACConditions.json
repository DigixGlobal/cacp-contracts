{"author":"DigixGlobal","title":"Condition based access control","fileName":"contracts/ACConditions.sol","name":"ACConditions","abi":[],"bin":"6060604052346000575b60358060166000396000f30060606040525b60005600a165627a7a723058208362ea034428c9332dea05d4103a01318d126c5e41a3aab31ee1b589229a1a480029","opcodes":"PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x0 JUMPI JUMPDEST PUSH1 0x35 DUP1 PUSH1 0x16 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE JUMPDEST PUSH1 0x0 JUMP STOP LOG1 PUSH6 0x627A7A723058 SHA3 DUP4 PUSH3 0xEA0344 0x28 0xc9 CALLER 0x2d 0xea SDIV 0xd4 LT GASPRICE ADD BALANCE DUP14 SLT PUSH13 0x5E41A3AAB31EE1B589229A1A48 STOP 0x29 ","source":"pragma solidity ^0.4.6;\n\nimport \"./Constants.sol\";\n\n/// @title Condition based access control\n/// @author DigixGlobal\n\ncontract ACConditions is Constants {\n   \n    modifier notNullAddress(address _item) {\n        if (_item == NULL_ADDRESS) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n    modifier ifNullAddress(address _item) {\n        if (_item != NULL_ADDRESS) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n    modifier notNullUint(uint256 _item) {\n        if (_item == NONE) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n    modifier ifNullUint(uint256 _item) {\n        if (_item != NONE) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n    modifier notNullBytes(bytes32 _item) {\n        if (_item == EMPTY) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n    modifier ifNullBytes(bytes32 _item) {\n        if (_item != EMPTY) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n    modifier notNullString(string _item) {\n        bytes memory _i = bytes(_item);\n        if (_i.length == 0) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n    modifier ifNullString(string _item) {\n        bytes memory _i = bytes(_item);\n        if (_i.length != 0) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n    modifier requireGas(uint256 _requiredgas) {\n        if (msg.gas < _requiredgas) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n}\n","abiDocs":[]}
