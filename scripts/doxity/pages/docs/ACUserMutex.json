{"author":"DigixGlobal","title":"Per user locking based access control","fileName":"contracts/ACUserMutex.sol","name":"ACUserMutex","abi":[{"constant":true,"inputs":[{"name":"_mutexId","type":"bytes32"}],"name":"isUserMutexLocked","outputs":[{"name":"_locked","type":"bool"}],"payable":false,"type":"function"}],"bin":"606060405234610000575b61013f806100196000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063403f3b571461003e575b610000565b346100005761005d600480803560001916906020019091905050610077565b604051808215151515815260200191505060405180910390f35b600060003383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018260001916600019168152602001925050506040518091039020905060006000826000191660001916815260200190815260200160002060009054906101000a900460ff1691508191505b509190505600a165627a7a72305820f399c78d8028c89f8f5673888b40f03fcc656ec312cb6d3acd290815fa16d5590029","opcodes":"PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x0 JUMPI JUMPDEST PUSH2 0x13F DUP1 PUSH2 0x19 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x403F3B57 EQ PUSH2 0x3E JUMPI JUMPDEST PUSH2 0x0 JUMP JUMPDEST CALLVALUE PUSH2 0x0 JUMPI PUSH2 0x5D PUSH1 0x4 DUP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 0x77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x0 CALLER DUP4 PUSH1 0x40 MLOAD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP3 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 SWAP1 POP PUSH1 0x0 PUSH1 0x0 DUP3 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SHA3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP DUP2 SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP STOP LOG1 PUSH6 0x627A7A723058 SHA3 RETURN SWAP10 0xc7 DUP14 DUP1 0x28 0xc8 SWAP16 DUP16 JUMP PUSH20 0x888B40F03FCC656EC312CB6D3ACD290815FA16D5 MSIZE STOP 0x29 ","source":"pragma solidity ^0.4.6;\n\n/// @title Per user locking based access control\n/// @author DigixGlobal\n\ncontract ACUserMutex {\n\n    mapping (bytes32 => bool) umlocks;\n\n    modifier ifUserMutexLocked(bytes32 _mId) {\n        if (!isUserMutexLocked(_mId)) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n    modifier unlessUserMutexLocked(bytes32 _mId) {\n        if (isUserMutexLocked(_mId)) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n    function userMutexLock(bytes32 _mutexId) private returns (bool _success) {\n        bytes32 _key = sha3(msg.sender, _mutexId);\n        umlocks[_key] = true;\n        _success = true;\n        return _success;\n    }\n    \n    function userMutexUnlock(bytes32 _mutexId) private returns (bool _success) {\n        bytes32 _key = sha3(msg.sender, _mutexId);\n        umlocks[_key] = true;\n        _success = true;\n        return _success;\n    }\n    \n    function isUserMutexLocked(bytes32 _mutexId) public constant returns (bool _locked) {\n        bytes32 _key = sha3(msg.sender, _mutexId);\n        _locked = umlocks[_key];\n        return _locked;\n    }\n\n}\n","abiDocs":[{"constant":true,"inputs":[{"name":"_mutexId","type":"bytes32"}],"name":"isUserMutexLocked","outputs":[{"name":"_locked","type":"bool"}],"payable":false,"type":"function","signature":"isUserMutexLocked(bytes32)","signatureHash":"403f3b57"}]}
