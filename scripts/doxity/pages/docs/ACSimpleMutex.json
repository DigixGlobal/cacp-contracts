{"fileName":"contracts/ACSimpleMutex.sol","name":"ACSimpleMutex","abi":[{"constant":true,"inputs":[{"name":"_mutexId","type":"bytes32"}],"name":"isSimpleMutexLocked","outputs":[{"name":"_locked","type":"bool"}],"payable":false,"type":"function"}],"bin":"606060405234610000575b60d4806100186000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638e184ed814603c575b6000565b3460005760586004808035600019169060200190919050506072565b604051808215151515815260200191505060405180910390f35b600060006000836000191660001916815260200190815260200160002060009054906101000a900460ff1690508090505b9190505600a165627a7a7230582056adf6771a3d125e1bac20c1d9f698bf7276f18285955354a64153cbc988d8910029","opcodes":"PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x0 JUMPI JUMPDEST PUSH1 0xD4 DUP1 PUSH2 0x18 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x8E184ED8 EQ PUSH1 0x3C JUMPI JUMPDEST PUSH1 0x0 JUMP JUMPDEST CALLVALUE PUSH1 0x0 JUMPI PUSH1 0x58 PUSH1 0x4 DUP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH1 0x72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x0 PUSH1 0x0 DUP4 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SHA3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP1 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP STOP LOG1 PUSH6 0x627A7A723058 SHA3 JUMP 0xad 0xf6 PUSH24 0x1A3D125E1BAC20C1D9F698BF7276F18285955354A64153CB 0xc9 DUP9 0xd8 SWAP2 STOP 0x29 ","source":"pragma solidity ^0.4.2;\n\n\ncontract ACSimpleMutex {\n\n    mapping (bytes32 => bool) slocks;\n    \n    modifier ifSimpleMutexLocked(bytes32 _mId) {\n        if (!isSimpleMutexLocked(_mId)) {\n            throw;\n        } else {\n            _;\n        }\n    }\n    \n    modifier unlessSimpleMutexLocked(bytes32 _mId) {\n        if (isSimpleMutexLocked(_mId)) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n    function simpleMutexLock(bytes32 _mutexId) private returns (bool _success) {\n        slocks[_mutexId] = true;\n        _success = true;\n        return _success;\n    }\n    \n    function simpleMutexUnlock(bytes32 _mutexId) private returns (bool _success) {\n        slocks[_mutexId] = false;\n        _success = true;\n        return _success;\n    }\n    \n    function isSimpleMutexLocked(bytes32 _mutexId) public constant returns (bool _locked) {\n        _locked = slocks[_mutexId];\n        return _locked;\n    }\n\n}\n","abiDocs":[{"constant":true,"inputs":[{"name":"_mutexId","type":"bytes32"}],"name":"isSimpleMutexLocked","outputs":[{"name":"_locked","type":"bool"}],"payable":false,"type":"function","signature":"isSimpleMutexLocked(bytes32)","signatureHash":"8e184ed8"}]}
