{"author":"DigixGlobal","title":"State machine access control","fileName":"contracts/ACState.sol","name":"ACState","abi":[],"bin":"6060604052346000575b60358060166000396000f30060606040525b60005600a165627a7a72305820c0457240f53723deaa26c5dc09dd69966fca8976cfe08064798dd9ee0f85a4610029","opcodes":"PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x0 JUMPI JUMPDEST PUSH1 0x35 DUP1 PUSH1 0x16 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE JUMPDEST PUSH1 0x0 JUMP STOP LOG1 PUSH6 0x627A7A723058 SHA3 0xc0 GASLIMIT PUSH19 0x40F53723DEAA26C5DC09DD69966FCA8976CFE0 DUP1 PUSH5 0x798DD9EE0F DUP6 LOG4 PUSH2 0x29 ","source":"pragma solidity ^0.4.6;\n\n/// @title State machine access control\n/// @author DigixGlobal\n\ncontract ACState {\n\n    mapping (bytes32 => uint256) states;\n\n    modifier ifState(bytes32 _key, uint8 _state) {\n\n        if (states[_key] != _state) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n    modifier unlessState(bytes32 _key, uint8 _state) {\n        if (states[_key] == _state) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n    function setState(bytes32 _key, uint8 _state) private returns (bool _success) {\n        states[_key] = _state;\n        _success = true;\n        return _success;\n    }\n    \n}\n","abiDocs":[]}
