{"fileName":"contracts/ACState.sol","name":"ACState","abi":[],"bin":"6060604052346000575b60358060166000396000f30060606040525b60005600a165627a7a723058205abd03a3d0dda27bce46e3cbab36d852f8f1f34da05a5e289b4915364886bc070029","opcodes":"PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x0 JUMPI JUMPDEST PUSH1 0x35 DUP1 PUSH1 0x16 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE JUMPDEST PUSH1 0x0 JUMP STOP LOG1 PUSH6 0x627A7A723058 SHA3 GAS 0xbd SUB LOG3 0xd0 0xdd LOG2 PUSH28 0xCE46E3CBAB36D852F8F1F34DA05A5E289B4915364886BC0700290000 ","source":"pragma solidity ^0.4.2;\n\n\ncontract ACState {\n\n    mapping (bytes32 => uint256) states;\n\n    modifier ifState(bytes32 _key, uint8 _state) {\n\n        if (states[_key] != _state) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n    modifier unlessState(bytes32 _key, uint8 _state) {\n        if (states[_key] == _state) {\n            throw;\n        } else {\n            _;\n        }\n    }\n\n    function setState(bytes32 _key, uint8 _state) private returns (bool _success) {\n        states[_key] = _state;\n        _success = true;\n        return _success;\n    }\n    \n}\n","abiDocs":[]}
